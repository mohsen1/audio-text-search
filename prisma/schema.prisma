// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  elevenlabsApiKey String?
  accounts      Account[]
  sessions      Session[]
  audioFiles    AudioFile[]
}

model AudioFile {
  id            String   @id @default(cuid())
  fileName      String
  originalName  String
  fileSize      Int
  mimeType      String
  transcription String?
  transcriptData String?  // JSON string containing detailed transcript with timestamps
  uploadedAt    DateTime @default(now())
  processedAt   DateTime?
  status        String   @default("processing") // "processing", "completed", "failed"
  userId        String
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  words         TranscriptWord[]
}

model TranscriptWord {
  id          String    @id @default(cuid())
  audioFileId String
  word        String
  startTime   Float     // Start time in seconds
  endTime     Float     // End time in seconds
  wordIndex   Int       // Position in the transcript
  
  audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  
  @@index([audioFileId, wordIndex])
  @@index([audioFileId, word])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
